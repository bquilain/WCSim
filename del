include/WCSimPrimaryGeneratorMessenger.hh:  G4UIcmdWithAString* radonScalingCmd;
include/WCSimPrimaryGeneratorMessenger.hh:  G4UIcmdWithAnInteger* radonGeoSymCmd;
macros/mPMT_NiBall.mac:#/mygen/generator radon
macros/mPMT_NiBall.mac:#/mygen/radon_scaling A # 	Relative scaling with respect to full ID volume (Pessimistic)
macros/mPMT_NiBall.mac:#/mygen/radon_scaling B #	Absolute scaling with respect to ID border (Optimistic)
macros/mPMT_NiBall.mac:#/mygen/radon_scaling 0 #	Uniform distribution
macros/mPMT_NiBall.mac:#/mygen/radon_symmetry 1 #	Divide the detector in x slices using the theta symmetry
macros/mPMT_radon_with_bias.mac:/mygen/generator radon
macros/mPMT_radon_with_bias.mac:/mygen/radon_scaling A # 	Relative scaling with respect to full ID volume (Pessimistic)
macros/mPMT_radon_with_bias.mac:#/mygen/radon_scaling B #	Absolute scaling with respect to ID border (Optimistic)
macros/mPMT_radon_with_bias.mac:#/mygen/radon_scaling 0 #	Uniform distribution
macros/mPMT_radon_with_bias.mac:/mygen/radon_symmetry 1 #	Divide the detector in x slices using the theta symmetry
macros/mPMT_radon_without_bias.mac:/mygen/generator radon
macros/mPMT_radon_without_bias.mac:/mygen/radon_scaling A # 	Relative scaling with respect to full ID volume (Pessimistic)
macros/mPMT_radon_without_bias.mac:#/mygen/radon_scaling B #	Absolute scaling with respect to ID border (Optimistic)
macros/mPMT_radon_without_bias.mac:#/mygen/radon_scaling 0 #	Uniform distribution
macros/mPMT_radon_without_bias.mac:/mygen/radon_symmetry 1 #	Divide the detector in x slices using the theta symmetry
src/WCSimGenerator_Radioactivity.cc:/** 	following SK-IV radon-like event distribution				**/
src/WCSimPrimaryGeneratorAction.cc:      //G4cout << " Generate radon events " << G4endl;
src/WCSimPrimaryGeneratorMessenger.cc:  genCmd->SetGuidance(" Available generators : muline, gun, laser, gps, rootracker, radon");
src/WCSimPrimaryGeneratorMessenger.cc:  genCmd->SetCandidates("muline gun laser gps rootracker radon");
src/WCSimPrimaryGeneratorMessenger.cc:  radonScalingCmd = new G4UIcmdWithAString("/mygen/radon_scaling",this);
src/WCSimPrimaryGeneratorMessenger.cc:  radonScalingCmd->SetGuidance("Select scalling scenario, if scenario 0 is selected, Bi214 are generated uniformly");
src/WCSimPrimaryGeneratorMessenger.cc:  radonScalingCmd->SetGuidance("[usage] /mygen/radon SCENARIO ");
src/WCSimPrimaryGeneratorMessenger.cc:  radonScalingCmd->SetGuidance("     SCENARIO : 0, A, B");
src/WCSimPrimaryGeneratorMessenger.cc:  radonScalingCmd->SetCandidates("0 A B");
src/WCSimPrimaryGeneratorMessenger.cc:  radonScalingCmd->SetParameter(param);
src/WCSimPrimaryGeneratorMessenger.cc:  radonGeoSymCmd = new G4UIcmdWithAnInteger("/mygen/radon_symmetry",this);
src/WCSimPrimaryGeneratorMessenger.cc:  radonGeoSymCmd->SetGuidance("Select scalling scenario");
src/WCSimPrimaryGeneratorMessenger.cc:  radonGeoSymCmd->SetGuidance("[usage] /mygen/radon SCENARIO ");
src/WCSimPrimaryGeneratorMessenger.cc:  radonGeoSymCmd->SetGuidance("     SYMMETRY : 1 ... ");
src/WCSimPrimaryGeneratorMessenger.cc:  radonScalingCmd->SetParameter(param);
src/WCSimPrimaryGeneratorMessenger.cc:  delete radonScalingCmd;
src/WCSimPrimaryGeneratorMessenger.cc:  delete radonGeoSymCmd;
src/WCSimPrimaryGeneratorMessenger.cc:    else if ( newValue == "radon" ) //G. Pronost: Addition of Radon generator (based on F. Nova's radioactive generator but dedicated to radioactive events in water)
src/WCSimPrimaryGeneratorMessenger.cc:  if ( command==radonScalingCmd ) 
src/WCSimPrimaryGeneratorMessenger.cc:  if ( command==radonGeoSymCmd ) 
src/WCSimPrimaryGeneratorMessenger.cc:      myAction->SetRadonSymmetry(radonGeoSymCmd->GetNewIntValue(newValue));
src/WCSimPrimaryGeneratorMessenger.cc:      { cv = "radon"; } // G. Pronost: Addition of Radon generator
